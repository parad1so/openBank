import java.util.Arrays;
import java.util.List;

public class One {
    //idemidov
    //Внимание! Для расчета результата мы учитываем только корректность решения (прохождение тест-кейсов). Оптимальность алгоритма и затраты памяти не учитываются.
    //
    //В одном городе выпустили закон, который обязывает людей носить сразу по несколько масок из-за опасности пандемии и мэр города обратился к вам, чтобы узнать, сколько масок должны надевать граждане, чтобы процент заражённости был минимальным.
    //Существует несколько типов масок, и каждая из них имеет свою степень защиты. Количество масок каждого типа не ограничено.
    //Стоимость маски соответствует её эффективности. Нужно потратить минимальную сумму для достижения параметра эффективности из поручения мэра. То есть главная задача - достичь параметр эффективности, при этом минимально его превысив (в идеале - получить равный).
    //Если вариантов несколько, то выведите минимальное количество масок.
    //
    // Ввод:
    //
    //type_mask  – массив типов масок (integer[]). Где type_mask[i] – эффективность маски
    //required – значение эффективности, которую в сумме должны давать маски (integer)
    // Вывод:
    //integer – минимальное количество масок, которые должны носить граждане города, удовлетворяющие условиям цены и эффективности
    //
    //Example:
    //
    //type_mask=[50, 20, 10]
    //required = 75
    //getResult(type_mask, required) = 3 //50 + 20 + 10 >= 75

        public static int getResult(List<Integer> typeMask, int req) {
            int n = typeMask.size();
            int[] dp = new int[10 * req];
            Arrays.fill(dp, Integer.MAX_VALUE / 2);
            dp[0] = 0;
            for (int i = 0; i < dp.length; i++) {
                for (int msk = 0; msk < typeMask.size(); msk++) {
                    int j = i + typeMask.get(msk);
                    if (j < dp.length) {
                        dp[j] = Math.min(dp[j], dp[i] + 1);
                    }
                }
            }
            int res = Integer.MAX_VALUE / 2;
            for (int i = req; i < dp.length; i++) {
                if (dp[i] < Integer.MAX_VALUE / 2) {
                    res = dp[i];
                    break;
                }
            }
            return res;
        }
}
